<?xml version="1.0" encoding="utf-8"?>

<solution name="Zege" ModuleIdAllowRanges="1-1000">
	<import file="solution.linkd.xml"/>
	<import file="../ZezeJava/solution.zeze.xml"/>

	<module name="User" id="1">
		修改 id 必须同时修改 solution.linkd.xml:Zezex.Linkd.BAuth.ProviderUserModuleId. Linkd转发需要知道。

		<bean name="BUser">
			<!-- 基本信息 -->
			<variable id="1" name="Account"    type="string" />
			<variable id="2" name="Type"       type="int" />
			<variable id="3" name="CreateTime" type="long" />
			<variable id="4" name="NickName"   type="string" /> 不唯一

			<!-- 验证 -->
			<variable id="20" name="SecureKeys" type="map" key="int" value="binary" />

			<!-- 实名 -->
			<enum name="RealFlagIdentityCard" value="1" />
			<enum name="RealFlagPhone"        value="2" />
			<enum name="RealFlagBankCard"     value="4" />
			<enum name="RealFlagFaceToFace"   value="8" />

			<variable id="30" name="RealFlags"    type="long" />
			<variable id="31" name="RealName"     type="string" />
			<variable id="32" name="IdentityCard" type="string" /> 和账号一一对应
			<variable id="33" name="Phone"        type="string" /> 一个phone可以对应多个账号，有上限
			<variable id="34" name="BankCard"     type="list" value="string" />
			<variable id="35" name="FaceToFace"   type="bool" /> 当面认证(银行合作，付费？)，保存视频照片等认证记录，需要 IdentityCard 和 MobilePhone，可以不用绑定银行卡。
		</bean>

		<bean name="BAccount">
			<variable id="1" name="Account"  type="string" />
		</bean>

		<bean name="BAccounts">
			<variable id="1" name="Accounts"  type="set" value="string" />
		</bean>

		<table name="tUser"         key="string" value="BUser" /> key is account
		<table name="tIdentiryCard" key="string" value="BAccount" /> key is identirycard
		<table name="tPhone"        key="string" value="BAccounts" /> key is phone

		<protocolref ref="Zege.Linkd.Auth" />

		<!-- Rsa 签字验证 -->
		<bean name="BTokenRsa">
			<variable id="1" name="Sign" type="binary" />
			<variable id="2" name="SecureKeyIndex" type="int" />
		</bean>

		<!-- 短信验证 -->
		<bean name="BTokenPhoneMessage">
			<variable id="1" name="Message" type="string" />
		</bean>
	</module>

	<module name="Friend" id="2">
		<enum name="ErrorDepartmentNotFound" value="1"/>
		<enum name="ErrorFriendNodeNotFound" value="2"/>
		<enum name="ErrorMemberNodeNotFound" value="3"/>
		<enum name="ErrorDeparmentMemberNotInGroup" value="4"/>

		<!-- 好友列表用 Zeze.Collections.LinkedMap -->
		<bean name="BFriend">
			<variable id="1" name="Account" type="string"/>
			<variable id="2" name="Nick" type="string"/>
		</bean>

		<bean name="BAccount">
			<variable id="1" name="Account" type="string"/>
		</bean>

		<bean name="BNodeId">
			<variable id="1" name="NodeId" type="long"/>
		</bean>

		<bean name="BFriendNode">
			<variable id="1" name="PrevNodeId" type="long"/>
			<variable id="2" name="NextNodeId" type="long"/>
			<variable id="3" name="Friends"    type="list[BFriend]"/>
		</bean>

		<rpc name="AddFriend" argument="BAccount" handle="server"/>
		<rpc name="GetFriendNode" argument="BNodeId" result="BFriendNode" handle="server"/>

		<!-- 部门树用 Zeze.Collections.DepartmentTree -->
		<bean name="BManager">
		</bean>

		<bean name="BMember">
			<variable id="1" name="Account" type="string"/>
		</bean>

		<bean name="BDepartmentMember">
			<variable id="1" name="Account" type="string"/>
		</bean>

		<bean name="BDepartment">
			<variable id="1" name="Group" type="string"/>
			<variable id="2" name="Name" type="string"/>
			<variable id="3" name="ParentDepartment" type="long"/>
		</bean>

		<rpc name="CreateDepartment" argument="BDepartment" result="BDepartmentId" handle="server"/>

		<bean name="BDepartmentId">
			<variable id="1" name="Group" type="string"/>
			<variable id="2" name="Id" type="long"/>
		</bean>

		<rpc name="DeleteDepartment" argument="BDepartmentId" handle="server"/>

		<bean name="BDepartmentMove">
			<variable id="1" name="Group" type="string"/>
			<variable id="2" name="Id" type="long"/>
			<variable id="3" name="NewParent" type="long"/>
		</bean>
		<rpc name="MoveDepartment" argument="BDepartmentMove" handle="server"/>

		<bean name="BDepartmentNode">
			<variable id="1" name="ParentDepartment" type="long" /> 0表示第一级部门
			<variable id="2" name="Childs" type="map" key="string" value="long" /> name 2 id。采用整体保存，因为需要排序和重名判断。需要加数量上限。
			<variable id="3" name="Name" type="string" />
			<variable id="4" name="Managers" type="map[string,BManager]"/>
		</bean>
		<rpc name="GetDepartmentNode" argument="BDepartmentId" result="BDepartmentNode" handle="server"/>

		<bean name="BGroup">
			<variable id="1" name="Root" type="string" /> 群主
			<variable id="2" name="Managers" type="map[string,BManager]"/> 管理员
			<variable id="4" name="Childs" type="map" key="string" value="long" /> name 2 id。采用整体保存，因为需要排序和重名判断。需要加数量上限。
		</bean>
		<rpc name="GetGroupRoot"      argument="BDepartmentId" result="BGroup" handle="server"/>

		<bean name="BMemberNode">
			<variable id="1" name="PrevNodeId" type="long"/>
			<variable id="2" name="NextNodeId" type="long"/>
			<variable id="3" name="Members"    type="list[BMember]"/>
		</bean>

		<bean name="BDepartmentMemberNode">
			<variable id="1" name="PrevNodeId" type="long"/>
			<variable id="2" name="NextNodeId" type="long"/>
			<variable id="3" name="DepartmentMembers" type="list[BDepartmentMember]"/>
		</bean>

		<bean name="BGroupNodeId">
			<variable id="1" name="Group" type="string"/>
			<variable id="2" name="NodeId" type="long"/>
		</bean>

		<rpc name="GetGroupMemberNode" argument="BGroupNodeId" result="BMemberNode" handle="server"/>

		<bean name="BDepartmentNodeId">
			<variable id="1" name="Group" type="string"/>
			<variable id="2" name="DepartmentId" type="long"/>
			<variable id="3" name="NodeId" type="long"/>
		</bean>
		<rpc name="GetDepartmentMemberNode" argument="BDepartmentNodeId" result="BDepartmentMemberNode" handle="server"/>

		<bean name="BAddDepartmentMember">
			<variable id="1" name="Group" type="string"/>
			<variable id="2" name="DepartmentId" type="long"/>
			<variable id="3" name="Account" type="string"/>
		</bean>
		<rpc name="AddDepartmentMember" argument="BAddDepartmentMember" handle="server"/>
	</module>

	<module name="Message" id="3">
		<bean name="BMessageRoot">
			<variable id="1" name="NextMessageId" type="long" />
			<variable id="2" name="FirstMessageId" type="long" />
			<variable id="3" name="LastMessageId" type="long" />

			多个客户端同时登录时，一个设置，其他得到已读通知。
			已读的条件是消息同步发送给客户端就算已读？
			<variable id="4" name="LastReadedMessageId" type="long" />

			<variable id="5" name="MessageTotalBytes" type="long" />
		</bean>

		<bean name="BSystemMessage">
		</bean>

		<bean name="BTextMessage">
			文本聊天消息，需要标准化嵌入式表情。
			有最大大小。
			<variable id="1" name="Message" type="string" />
		</bean>

		<bean name="BP2PMessage">
		</bean>

		<bean name="BEmojiMessage">
			有最大大小。需要标准化Type。
			<variable id="1" name="Type" type="int" />
			<variable id="2" name="Image" type="binary" />
		</bean>

		<bean name="BMessage">
			<enum name="TypeSystem" value="-1"/> 系统消息，不加密，SecureKeyIndex is -1
			<enum name="TypeP2P"    value="-2"/> P2P协商消息，不加密，服务器要参与协商
			<enum name="TypeText"   value="0"/> 文本聊天消息，加密的
			<enum name="TypeEmoji"  value="1"/> 自定义表情消息，加密的

			<variable id="1" name="MessageType" type="int" />
			<variable id="2" name="SecureKeyIndex" type="int" />
			<variable id="3" name="SecureMessage" type="binary" />
			<variable id="4" name="From"          type="string" /> 发送用户，服务器填写
			<variable id="5" name="Group"         type="string" /> 群消息才填写，服务器填写，
			<variable id="6" name="DepartmentId"   type="long" /> 群消息才填写，服务器填写。
		</bean>
		
		<!-- 好友消息历史 -->
		<beankey name="BFriendMessageKey">
			<variable id="1" name="Owner" type="string" />
			<variable id="2" name="Friend" type="string" />
			<variable id="3" name="MessageId" type="long" />
		</beankey>
		<beankey name="BFriendKey">
			<variable id="1" name="Owner" type="string" />
			<variable id="2" name="Friend" type="string" />
		</beankey>

		<table name="tFriendMessage" key="BFriendKey" value="BMessageRoot" />
		<table name="tFriendMessages" key="BFriendMessageKey" value="BMessage" />

		<!-- 群（部门）消息历史 -->
		<beankey name="BDepartmentKey">
			<variable id="1" name="Group" type="string" />
			<variable id="2" name="DepartmentId" type="long" />
		</beankey>
		<beankey name="BDepartmentMessageKey">
			<variable id="1" name="Group" type="string" />
			<variable id="2" name="DepartmentId" type="long" />
			<variable id="3" name="MessageId" type="long" />
		</beankey>
		<table name="tDepartementMessage" key="BDepartmentKey" value="BMessageRoot" />
		<table name="tDepartementMessages" key="BDepartmentMessageKey" value="BMessage" />

		<bean name="BSendMessage">
			<variable id="1" name="Friend" type="string" />
			<variable id="2" name="Message" type="BMessage" />
		</bean>

		<rpc name="SendMessage" argument="BSendMessage" handle="server"/>

		<bean name="BSendDepartmentMessage">
			<variable id="1" name="Group" type="string" />
			<variable id="2" name="DepartmentId" type="long" />
			<variable id="3" name="Message" type="BMessage" />
		</bean>

		<rpc name="SendDepartmentMessage" argument="BSendDepartmentMessage" handle="server"/>

		<rpc name="NotifyMessage" argument="BMessage" handle="client"/>
	</module>

	<project name="server" gendir="." scriptdir="src" platform="java" GenTables="">
		<!--
		这里引用的模块不该定义协议，定义了也不会被生成，一般为纯逻辑或者数据库模块。
		<module ref="CommonModule"/>
		-->
		<!-- service 生成到 solution 名字空间下 -->
		<service name="Server" handle="server" base="Zeze.Arch.ProviderService">
			<module ref="User"/>
			<module ref="Friend"/>
			<module ref="Message"/>
		</service>

		<ModuleStartOrder>
		</ModuleStartOrder>

		<service name="ServerDirect" handle="server,client" base="Zeze.Arch.ProviderDirectService">
		</service>
	</project>

	<project name="client" gendir="." scriptdir="src" platform="java" BuiltinNG="true">
		<service name="ClientService" handle="client" base="Zeze.Services.HandshakeClient">
			<module ref="Zeze.Builtin.Online"/>
			<module ref="Zeze.Builtin.LinkdBase"/>
			<module ref="Zege.Linkd"/>
			<module ref="Friend"/>
			<module ref="Message"/>
		</service>
	</project>

</solution>
